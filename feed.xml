<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>modal_soul debriefing</title>
    <description>I guess you could call it a failure, but I prefer the term learning experience.</description>
    <link>http://modalsoul.github.io/</link>
    <atom:link href="http://modalsoul.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 23 Jul 2016 15:47:38 +0900</pubDate>
    <lastBuildDate>Sat, 23 Jul 2016 15:47:38 +0900</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>第１部 魔法のSQL 1-5 外部結合の使い方｜達人に学ぶSQL徹底指南書</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;1-5 外部結合の使い方&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;外部結合で行列変換　その１（行→列）：クロス表を作る&lt;/h2&gt;

&lt;p&gt;外部結合はスカラ・サブクエリで代用できる。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;外部結合で行列変換　その２（列→行）：繰り返し項目を１列にまとめる&lt;/h2&gt;

&lt;p&gt;UNION ALLで、行持ちに変換。UNION ALLは重複行を削除しない。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;クロス表で入れ子の表側を作る&lt;/h2&gt;
&lt;p&gt;外部結合でも、結合条件がNULLとなり、結果がunknownになる。&lt;/p&gt;

&lt;p&gt;表側を入れ子にする場合、その形のマスタをあらかじめ用意する。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;掛け算としての結合&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;結合は、一対一でなくとも一対多ならべ行数は（不当には）増えない。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-5&quot;&gt;完全外部結合&lt;/h2&gt;
&lt;p&gt;完全外部結合は「両方をマスタに使う結合」&lt;/p&gt;

&lt;p&gt;完全外部結合を使えない環境で同じ結果を得るには、左外部結合の結果と右外部結合の結果をUNIONする。&lt;/p&gt;

&lt;p&gt;内部結合 = 積集合（INTERSECT）&lt;/p&gt;

&lt;p&gt;完全外部結合 = 和集合（UNION）&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;外部結合で集合演算&lt;/h2&gt;
&lt;p&gt;集合演算子はソートを発生させるので、パフォーマンス上の問題を引き起こす可能性がある。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;完全外部結合で排他的和集合を求める&lt;/h2&gt;
&lt;p&gt;関係除算を外部結合で書ける。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;「OUTER」は省略可能だが、内部結合に対して外部結合であることを明治するために、省略しないほうが良い。&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Jul 2016 23:00:00 +0900</pubDate>
        <link>http://modalsoul.github.io/booklog/2016/07/20/sql-orientation-by-expert-1-5.html</link>
        <guid isPermaLink="true">http://modalsoul.github.io/booklog/2016/07/20/sql-orientation-by-expert-1-5.html</guid>
        
        <category>SQL</category>
        
        
        <category>booklog</category>
        
      </item>
    
      <item>
        <title>第１部 魔法のSQL 1-4 HAVING句の力｜達人に学ぶSQL徹底指南書</title>
        <description>&lt;h1 id=&quot;having&quot;&gt;1-4 HAVING句の力&lt;/h1&gt;

&lt;h2 id=&quot;section&quot;&gt;データの歯抜けを探す&lt;/h2&gt;
&lt;p&gt;現在の標準SQLでは &lt;strong&gt;HAVING句を単独で使える&lt;/strong&gt;。
ただしその場合、SELECT句で元テーブルの列を参照できなくなるので、定数を指定するか集約関数を使う必要がある。&lt;/p&gt;

&lt;h2 id=&quot;having-1&quot;&gt;HAVING句でサブクエリ：最頻値を求める&lt;/h2&gt;
&lt;p&gt;GROUP BYは、もとの集合から部分集合を作る働きをする。&lt;/p&gt;

&lt;h2 id=&quot;having-2&quot;&gt;HAVING句で自己結合：メジアンを求める&lt;/h2&gt;
&lt;p&gt;大小関係に基づいて部分集合を作るなら、自己非等値結合。&lt;/p&gt;

&lt;h2 id=&quot;null&quot;&gt;NULLを含まない集合を探す&lt;/h2&gt;
&lt;p&gt;COUNT(*)はNULLを数える。COUNT(列名)はNULLを除外して集計する。&lt;/p&gt;

&lt;p&gt;特定の条件を満たす集合に含まれるかどうかを決める関数。 &lt;strong&gt;特性関数&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;関係除算でバスケット解析&lt;/h2&gt;
&lt;p&gt;ひとつの実体についての情報が複数行に分散して存在する場合、WHERE句で単純にORやINで条件を指定しても正しい結果は得られない。
WHERE句で指定する条件は、あくまで１行について適用されるから。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;WHERE句は &lt;strong&gt;集合の要素&lt;/strong&gt; の性質を調べる道具、対してHAVING句は &lt;strong&gt;集合自身&lt;/strong&gt; の性質を調べる道具。&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Jul 2016 23:00:00 +0900</pubDate>
        <link>http://modalsoul.github.io/booklog/2016/07/19/sql-orientation-by-expert-1-4.html</link>
        <guid isPermaLink="true">http://modalsoul.github.io/booklog/2016/07/19/sql-orientation-by-expert-1-4.html</guid>
        
        <category>SQL</category>
        
        
        <category>booklog</category>
        
      </item>
    
      <item>
        <title>第１部 魔法のSQL 1-3 3値理論とNULL｜達人に学ぶSQL徹底指南書</title>
        <description>&lt;h1 id=&quot;null&quot;&gt;1-3 3値理論とNULL&lt;/h1&gt;

&lt;h2 id=&quot;null-&quot;&gt;1. 比較述語とNULL その１：排中律が成立しない&lt;/h2&gt;
&lt;p&gt;「命題とその否定を「または」でつなげてできる命題はすべて真である」というのが排中律。&lt;/p&gt;

&lt;h2 id=&quot;null-casenull&quot;&gt;2. 比較述語とNULL その２：CASE式とNULL&lt;/h2&gt;
&lt;p&gt;単純CASE式の&lt;code class=&quot;highlighter-rouge&quot;&gt;CASE col_1 WHEN NULL&lt;/code&gt;は、&lt;code class=&quot;highlighter-rouge&quot;&gt;col_1 = NULL&lt;/code&gt;の省略形なので、trueにならず思ったような動作にならない。&lt;/p&gt;

&lt;h2 id=&quot;not-innot-exists&quot;&gt;3. NOT INとNOT EXISTSは同値ではない&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;NOT INのサブクエリで使用されるテーブルの選択列にNULLが存在する場合、&lt;/strong&gt; SQL全体の結果は常に空になる。&lt;/p&gt;

&lt;p&gt;EXITSは&lt;strong&gt;true&lt;/strong&gt; と&lt;strong&gt;false&lt;/strong&gt; しか返さない。そのため、INとEXISTSは同値変換が可能だが、NOT INとNOT EXISTSは同値ではない。&lt;/p&gt;

&lt;h2 id=&quot;null-1&quot;&gt;4. 限定述語とNULL&lt;/h2&gt;
&lt;p&gt;ALL述語は条件をANDで連結した論理式の省略形。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;5. 限定述語と極値関数は同値ではない&lt;/h2&gt;
&lt;p&gt;極値関数は &lt;strong&gt;集計の際にNULLを排除する&lt;/strong&gt;、 &lt;strong&gt;入力が空集合だった場合はNULLを返す&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;比較対象が存在しない場合、全行を返すべきか１行も返さないべきか、判断が必要。&lt;/p&gt;

&lt;h2 id=&quot;null-2&quot;&gt;6. 集約関数とNULL&lt;/h2&gt;
&lt;p&gt;COUNT関数以外の集約関数も、入力が空の場合NULLを返す。&lt;/p&gt;

&lt;p&gt;NULLを何らかの値に変換するか、帰ってきたNULLに対処するのかのどちらかを選ぶ必要がある。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;NULLみな死すべし、慈悲はない&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Jul 2016 20:00:00 +0900</pubDate>
        <link>http://modalsoul.github.io/booklog/2016/07/19/sql-orientation-by-expert-1-3.html</link>
        <guid isPermaLink="true">http://modalsoul.github.io/booklog/2016/07/19/sql-orientation-by-expert-1-3.html</guid>
        
        <category>SQL</category>
        
        
        <category>booklog</category>
        
      </item>
    
      <item>
        <title>ErgoDox EZを注文した</title>
        <description>&lt;p&gt;左手の親指の具合がどうもよろしくないので、セパレートかつエルゴノミクスなキーボードを探したら、これに行き着いた次第です。&lt;/p&gt;

&lt;p&gt;で、一式揃ったキット&lt;a href=&quot;https://www.indiegogo.com/projects/ergodox-ez-an-incredible-mechanical-keyboard/x/14602708#/&quot;&gt;ErgoDox EZ&lt;/a&gt;を&lt;a href=&quot;https://www.indiegogo.com/&quot;&gt;INDIEGOGO&lt;/a&gt;で注文した。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ErgoDox EZ Bundle:Blank $295&lt;/li&gt;
  &lt;li&gt;送料 $30&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;合計：$325&lt;/p&gt;

&lt;p&gt;早くこないかな&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jul 2016 22:00:00 +0900</pubDate>
        <link>http://modalsoul.github.io/gadget/2016/07/18/ergodox-ez-ordered.html</link>
        <guid isPermaLink="true">http://modalsoul.github.io/gadget/2016/07/18/ergodox-ez-ordered.html</guid>
        
        <category>ErgoDox</category>
        
        
        <category>gadget</category>
        
      </item>
    
      <item>
        <title>第１部 魔法のSQL 1-2 自己結合の使い方｜達人に学ぶSQL徹底指南書</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;1-2 自己結合の使い方&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;重複順列・順列・組み合わせ&lt;/h2&gt;

&lt;h3 id=&quot;section-2&quot;&gt;順列対&lt;/h3&gt;
&lt;p&gt;クロス結合して単純に直積を作れば得られる。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;順序対から重複を排除&lt;/h3&gt;
&lt;p&gt;結合条件によって、同一要素の組み合わせを排除。
２つのテーブルが実際に存在すると想像することがポイント。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;組み合わせ&lt;/h3&gt;
&lt;p&gt;等号「=」以外の比較演算子である&lt;や&gt;, &amp;lt;&amp;gt;を使って行う結合を「 **非等値結合** 」と言う。&lt;/や&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;重複行を削除する&lt;/h2&gt;
&lt;p&gt;自己相関サブクエリを使って重複を削除。
SQLの動作を考える際に、データの記憶方法（テーブル、ビュー）を考慮する必要はない。どちらも等しく「集合」（関係）。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;部分的に不一致なキーの検索&lt;/h2&gt;
&lt;p&gt;自己非等値結合を使う。
結合の代わりに、相関サブクエリを使っても書ける。この場合、DISTINCTが不要になる。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;ランキング&lt;/h2&gt;
&lt;p&gt;自己非等値結合を使う。
「同心円的な」（セルコ）再帰的集合を作る。&lt;/p&gt;

&lt;p&gt;※ 結合条件に合致しない場合も結果に反映させるために、内部結合ではなく外部結合を使っている。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;同順位が続いた後に順位を飛ばす&lt;/h3&gt;
&lt;p&gt;COUNTで件数をだし、順位に使う。&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;連続的に出力する&lt;/h3&gt;
&lt;p&gt;COUNTの対象をDISTINCTにすることで対応。&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;自己結合はとても強力だけど、異なるテーブル同士を対象に行う結合に比べてコスト高。
※ 特に非等値結合と組み合わせる場合。&lt;/p&gt;

&lt;p&gt;自己結合で使用する結合キーは、なるべく主キーを使うか、インデックスを作成しておく。&lt;/p&gt;

&lt;p&gt;本当に異なるテーブルを結合していると理解しやすい。&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Jul 2016 18:00:00 +0900</pubDate>
        <link>http://modalsoul.github.io/booklog/2016/07/17/sql-orientation-by-expert-1-2.html</link>
        <guid isPermaLink="true">http://modalsoul.github.io/booklog/2016/07/17/sql-orientation-by-expert-1-2.html</guid>
        
        <category>SQL</category>
        
        
        <category>booklog</category>
        
      </item>
    
      <item>
        <title>第１部 魔法のSQL 1-1 CASE式のススメ｜達人に学ぶSQL徹底指南書</title>
        <description>&lt;h1 id=&quot;case&quot;&gt;1-1 CASE式のススメ&lt;/h1&gt;

&lt;h2 id=&quot;section&quot;&gt;既存のコード体系を新しい体系に変換して集計する&lt;/h2&gt;
&lt;p&gt;GROUP BY句でCASE式を使うことで、集計単位を自由に設定できる。動的な変更もできる。&lt;/p&gt;

&lt;p&gt;PostgreSQL,MySQLでは、SELECT句のCASE式に別名をつけて、GROUP BY句で参照できる。※標準違反&lt;/p&gt;

&lt;h2 id=&quot;sql&quot;&gt;異なる条件の集計を1つのSQLで行う&lt;/h2&gt;
&lt;p&gt;SQLの結果を二次元表形式に整形できる。クロス表の形式で結果が出力される。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;WHERE句で条件分岐させるのは素人のやること。プロはSELECT句で分岐させる。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;check&quot;&gt;CHECK制約で複数の列の条件関係を定義する&lt;/h2&gt;
&lt;p&gt;CHECK制約でCASE式が使える。
論理積よりもゆるい条件法で記述できる。&lt;/p&gt;

&lt;h2 id=&quot;update&quot;&gt;条件を分岐させたUPDATE&lt;/h2&gt;
&lt;p&gt;複数のUPDATEを、CASE式を使って１つのSQLで実現できる。
退避用の値を用意しなくてすむ。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;テーブル同士のマッチング&lt;/h2&gt;
&lt;p&gt;DECODE関数などと比べると、CASE式は式の中で式を評価できる（BETWEEN, Like, &amp;gt;, &amp;lt; etc..といった述語群を使える）。&lt;/p&gt;

&lt;h2 id=&quot;case-1&quot;&gt;CASE式の中で集約関数を使う&lt;/h2&gt;
&lt;p&gt;集約結果に対する条件をHAVING句ではなく、CASE式を使うことでSELECT句で書くことができる。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;HAVING句で条件分岐させるのは素人のやること。プロはSELECT句で分岐させる。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-2&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;CASE式は、列名や定数を書ける場所には常に書くことができる。
便利だからCASE式を使おう。&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Jul 2016 12:00:00 +0900</pubDate>
        <link>http://modalsoul.github.io/booklog/2016/07/17/sql-orientation-by-expert-1-1.html</link>
        <guid isPermaLink="true">http://modalsoul.github.io/booklog/2016/07/17/sql-orientation-by-expert-1-1.html</guid>
        
        <category>SQL</category>
        
        
        <category>booklog</category>
        
      </item>
    
      <item>
        <title>GoogleAppsScriptでGoogleフォームの集計を自動化する。ついでにUnderscoreGS。</title>
        <description>&lt;p&gt;趣味でバイクに乗り出してから、給油と走行距離情報をGoogleフォームを使って記録してたりします。
記録している項目は、給油した日付や給油量、金額、ガソリンスタンドの種類と場所、そして走行距離。&lt;/p&gt;

&lt;p&gt;節約とかそういう目的がある訳ではなく、数値があると計測したくなる、くらいのライトな動機からはじめました。&lt;/p&gt;

&lt;p&gt;で、この情報を使って区間燃費や月間燃費を出してグラフ化してみると季節性の変化なんかが見えてきて楽しいんですが、ちまちま手で更新するのが面倒になったので、GoogleAppsScriptを使って、フォーム送信をトリガーに自動でこれらの情報が更新されるようにしてみた。&lt;/p&gt;

&lt;p&gt;素のJSがつらかったので、Underscore.jsなりlodashなり使えないか探したら、ありました&lt;a href=&quot;https://sites.google.com/site/scriptsexamples/custom-methods/underscoregs&quot;&gt;UnderscoreGS&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Underscore.jsの完全な互換という訳ではないですが、Underscore.jsにあるいろいろなメソッドが使えます。&lt;/p&gt;

&lt;p&gt;コードはこちら。
&lt;script src=&quot;https://gist.github.com/modalsoul/a542983c7b4f43acad261912f45d7491.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;あんまりUnderscoreGS使う旨味のないコードだなぁ。。ま、頻繁に手を入れるものでもないので、これにて書き捨て。&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Jul 2016 23:00:00 +0900</pubDate>
        <link>http://modalsoul.github.io/programing/2016/07/14/google-apps-script-with-underscore-gs.html</link>
        <guid isPermaLink="true">http://modalsoul.github.io/programing/2016/07/14/google-apps-script-with-underscore-gs.html</guid>
        
        <category>GoogleAppsScript</category>
        
        
        <category>programing</category>
        
      </item>
    
      <item>
        <title>Q25:オシャレな靴ひもの結び方｜プログラマ脳を鍛える数学パズル</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E8%84%B3%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%95%B0%E5%AD%A6%E3%83%91%E3%82%BA%E3%83%AB-%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%81%A7%E9%AB%98%E9%80%9F%E3%81%AA%E3%82%B3%E3%83%BC%E3%83%89%E3%81%8C%E6%9B%B8%E3%81%91%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%82%8B70%E5%95%8F-%E5%A2%97%E4%BA%95%E6%95%8F%E5%85%8B-ebook/dp/B016QEE30G%3FSubscriptionId%3DAKIAJLDE2PXG6A4EGGHQ%26tag%3Dmodalsoul-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB016QEE30G&quot; target=&quot;_blank&quot;&gt;プログラマ脳を鍛える数学パズル シンプルで高速なコードが書けるようになる70問&lt;/a&gt;をやる。今回は、Q25:オシャレな靴ひもの結び方。&lt;/p&gt;

&lt;p&gt;Q: スニーカーの合計12カ所の穴にひもを通すとき、交差する点が最も多くなるときの交点の数を求める。ただし、ひもを結ぶ位置は一番上とし、左右交互に使用する。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permutations&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permutations&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foldLeft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]){(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}:+(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foldLeft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;5行目のひもの通す順番を生成する部分がかなりカオスになってしまった。。&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Jul 2016 22:00:00 +0900</pubDate>
        <link>http://modalsoul.github.io/programing/2016/07/13/math-puzzle-25.html</link>
        <guid isPermaLink="true">http://modalsoul.github.io/programing/2016/07/13/math-puzzle-25.html</guid>
        
        <category>プログラマ脳を鍛える数学パズル</category>
        
        <category>Scala</category>
        
        
        <category>programing</category>
        
      </item>
    
      <item>
        <title>Q24:完璧に撃ち抜くストラックアウト｜プログラマ脳を鍛える数学パズル</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E8%84%B3%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%95%B0%E5%AD%A6%E3%83%91%E3%82%BA%E3%83%AB-%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%81%A7%E9%AB%98%E9%80%9F%E3%81%AA%E3%82%B3%E3%83%BC%E3%83%89%E3%81%8C%E6%9B%B8%E3%81%91%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%82%8B70%E5%95%8F-%E5%A2%97%E4%BA%95%E6%95%8F%E5%85%8B-ebook/dp/B016QEE30G%3FSubscriptionId%3DAKIAJLDE2PXG6A4EGGHQ%26tag%3Dmodalsoul-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB016QEE30G&quot; target=&quot;_blank&quot;&gt;プログラマ脳を鍛える数学パズル シンプルで高速なコードが書けるようになる70問&lt;/a&gt;をやる。今回は、Q24:完璧に撃ち抜くストラックアウト。&lt;/p&gt;

&lt;p&gt;Q: 9枚の的を打ち抜く順番を考える。周囲にフレームのある5番の的以外は、隣り合う的を2枚抜きできる。この時、9枚の的を打ち抜く順番が何通りあるか求める。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;single&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remain&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOrElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foldLeft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filterNot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;single&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sun, 10 Jul 2016 09:00:00 +0900</pubDate>
        <link>http://modalsoul.github.io/programing/2016/07/10/math-puzzle-24.html</link>
        <guid isPermaLink="true">http://modalsoul.github.io/programing/2016/07/10/math-puzzle-24.html</guid>
        
        <category>プログラマ脳を鍛える数学パズル</category>
        
        <category>Scala</category>
        
        
        <category>programing</category>
        
      </item>
    
      <item>
        <title>Q23:ブラックジャックで大もうけ!?|プログラマ脳を鍛える数学パズル</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E8%84%B3%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%95%B0%E5%AD%A6%E3%83%91%E3%82%BA%E3%83%AB-%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%81%A7%E9%AB%98%E9%80%9F%E3%81%AA%E3%82%B3%E3%83%BC%E3%83%89%E3%81%8C%E6%9B%B8%E3%81%91%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%82%8B70%E5%95%8F-%E5%A2%97%E4%BA%95%E6%95%8F%E5%85%8B-ebook/dp/B016QEE30G%3FSubscriptionId%3DAKIAJLDE2PXG6A4EGGHQ%26tag%3Dmodalsoul-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB016QEE30G&quot; target=&quot;_blank&quot;&gt;プログラマ脳を鍛える数学パズル シンプルで高速なコードが書けるようになる70問&lt;/a&gt;をやる。今回は、Q23:ブラックジャックで大もうけ!?。&lt;/p&gt;

&lt;p&gt;Q: コインを1枚ずつ賭けていったとき、最初に10枚のコインを持ち、ゲームを24回行った時、手元にコインが残るよパターンが何通りか求める。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coin&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOrElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sat, 09 Jul 2016 19:00:00 +0900</pubDate>
        <link>http://modalsoul.github.io/programing/2016/07/09/math-puzzle-23.html</link>
        <guid isPermaLink="true">http://modalsoul.github.io/programing/2016/07/09/math-puzzle-23.html</guid>
        
        <category>プログラマ脳を鍛える数学パズル</category>
        
        <category>Scala</category>
        
        
        <category>programing</category>
        
      </item>
    
  </channel>
</rss>
