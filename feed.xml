<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>modal_soul debriefing</title>
    <description>I guess you could call it a failure, but I prefer the term learning experience.</description>
    <link>http://modalsoul.github.io/</link>
    <atom:link href="http://modalsoul.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 24 Oct 2016 13:24:33 +0900</pubDate>
    <lastBuildDate>Mon, 24 Oct 2016 13:24:33 +0900</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>コップ本第3版と第2版の差分をメモっとく。第11~20章</title>
        <description>&lt;p&gt;9/20に出版された&lt;a href=&quot;https://www.amazon.co.jp/Scala%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%A9%E3%83%96%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E7%AC%AC3%E7%89%88-Martin-Odersky/dp/4844381490/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1474707665&amp;amp;sr=8-1&amp;amp;keywords=scala%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%A9%E3%83%96%E3%83%AB&amp;amp;linkCode=ll1&amp;amp;tag=modalsoul-22&amp;amp;linkId=5bbda6023af579e812cd7415c8465eb0&quot;&gt;Scalaスケーラブルプログラミング&lt;/a&gt;第3版を手元の第2版と読み比べして、差分をメモってく。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/booklog/2016/09/24/cup-book-3rd.html&quot;&gt;第1章〜第10章はこっち&lt;/a&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;scala&quot;&gt;第11章 Scalaの階層構造&lt;/h1&gt;

&lt;h2 id=&quot;scala-1&quot;&gt;11.1 Scalaのクラス階層&lt;/h2&gt;
&lt;p&gt;[Old] Scalaのクラスは、ScalaObjectという特別なマーカーとなるトレイトも継承しているという点でJavaのクラスと異なる。&lt;/p&gt;

&lt;p&gt;[New] scala.ScalaObjectがなくなった。(2.10からなくなってた)&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;11.4 独自の値クラスの定義&lt;/h2&gt;
&lt;p&gt;節が追加された。&lt;/p&gt;

&lt;p&gt;値クラスにできるクラスの条件
* パタメータがちょうど１つ
* 内容はdefだけ
* 他のクラスは値クラスを拡張できない
* 値クラスは、&lt;code class=&quot;highlighter-rouge&quot;&gt;equals&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;hashCode&lt;/code&gt;を再定義できない&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dollars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnyVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dollars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dollars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;$1000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-1&quot;&gt;第12章 トレイト&lt;/h1&gt;
&lt;p&gt;なし&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;第13章&lt;/h1&gt;
&lt;p&gt;なし&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;第14章 アサーションとテスト&lt;/h1&gt;
&lt;p&gt;## 14.1 アサーション
アサーションをコンパイル時に有効・無効化する方法が変わった。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第2版 : JVMの&lt;code class=&quot;highlighter-rouge&quot;&gt;-ea&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;-da&lt;/code&gt;オプション&lt;/li&gt;
  &lt;li&gt;第3版 : scalacコマンドに&lt;code class=&quot;highlighter-rouge&quot;&gt;-Xdisable-assertions&lt;/code&gt;オプションを指定して無効化&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ScalaTestの使い方についての説明が更新された。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;14.3 情報が豊富なエラーレポート&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;expect&lt;/code&gt;が&lt;code class=&quot;highlighter-rouge&quot;&gt;assertResult&lt;/code&gt;に。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;intercept&lt;/code&gt;が&lt;code class=&quot;highlighter-rouge&quot;&gt;assertThrow&lt;/code&gt;に。&lt;/p&gt;

&lt;p&gt;例外の内容をもっと詳しく知りたいときには、&lt;code class=&quot;highlighter-rouge&quot;&gt;assertThrows&lt;/code&gt;ではなく&lt;code class=&quot;highlighter-rouge&quot;&gt;intercept&lt;/code&gt;を使う。&lt;/p&gt;

&lt;h2 id=&quot;junittestng&quot;&gt;(第2版)14.4 JUnitとTestNGの使い方&lt;/h2&gt;
&lt;p&gt;無くなった&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;14.4 仕様としてのテスト&lt;/h2&gt;
&lt;p&gt;ScalaTestの説明がバージョンアップに追随。
specsの説明がspecs2に。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;14.5 プロパティベーステスト&lt;/h2&gt;
&lt;p&gt;ScalaCheckの説明がバージョンに追随。&lt;/p&gt;

&lt;h1 id=&quot;section-7&quot;&gt;第15章 ケースクラスとパターンマッチ&lt;/h1&gt;

&lt;h3 id=&quot;matchswitch&quot;&gt;15.1.3 matchとswitchの違い&lt;/h3&gt;

&lt;p&gt;match式は、 &lt;strong&gt;式の評価時に例外が投じられなければ、&lt;/strong&gt; 必ず値を返す。&lt;/p&gt;

&lt;h4 id=&quot;type-erasure&quot;&gt;15.2.7.1 型消去(type erasure)&lt;/h4&gt;
&lt;p&gt;scalaインタープリターの&lt;code class=&quot;highlighter-rouge&quot;&gt;-unchecked&lt;/code&gt;オプションの説明が無くなった。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;15.2.8 変数の束縛&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UnOp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abs&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UnOp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abs&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;変数束縛パターン(variable-binding pattern)で、値を束縛した場合、eとexprは同じ値を持つが、絶対値演算は1つ少なくなる。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;という捕捉が追加された。&lt;/p&gt;

&lt;h1 id=&quot;section-9&quot;&gt;第16章 リストの操作&lt;/h1&gt;

&lt;h3 id=&quot;section-10&quot;&gt;16.6.2 分割統治原則&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;???&lt;/code&gt;についての注釈が追加された。&lt;/p&gt;

&lt;h1 id=&quot;section-11&quot;&gt;第17章 コレクションの使い方&lt;/h1&gt;
&lt;p&gt;なし&lt;/p&gt;

&lt;h1 id=&quot;section-12&quot;&gt;第18章 ミュータブルオブジェクト&lt;/h1&gt;
&lt;p&gt;章名が、ステートフルオブジェクト =&amp;gt; ミュータブルオブジェクトに変更。&lt;/p&gt;

&lt;h1 id=&quot;section-13&quot;&gt;第19章 型のパラメーター化&lt;/h1&gt;
&lt;p&gt;なし&lt;/p&gt;

&lt;h1 id=&quot;section-14&quot;&gt;第20章 抽象メンバー&lt;/h1&gt;

&lt;h2 id=&quot;section-15&quot;&gt;20.8 リファインメント型&lt;/h2&gt;
&lt;p&gt;節名が、&lt;strong&gt;構造的サブ型&lt;/strong&gt; から &lt;strong&gt;リファインメント型&lt;/strong&gt; に変更された。&lt;/p&gt;

&lt;p&gt;9.4節のローンパターンのサンプルを一般化する場合についての説明以降が省略された。&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Oct 2016 08:00:00 +0900</pubDate>
        <link>http://modalsoul.github.io/booklog/2016/10/24/cup-book-3rd.html</link>
        <guid isPermaLink="true">http://modalsoul.github.io/booklog/2016/10/24/cup-book-3rd.html</guid>
        
        <category>Scala</category>
        
        <category>コップ本第3版</category>
        
        
        <category>booklog</category>
        
      </item>
    
      <item>
        <title>コップ本第3版と第2版の差分をメモっとく。第1~10章</title>
        <description>&lt;p&gt;9/20に&lt;a href=&quot;https://www.amazon.co.jp/Scala%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%A9%E3%83%96%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E7%AC%AC3%E7%89%88-Martin-Odersky/dp/4844381490/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1474707665&amp;amp;sr=8-1&amp;amp;keywords=scala%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%A9%E3%83%96%E3%83%AB&amp;amp;linkCode=ll1&amp;amp;tag=modalsoul-22&amp;amp;linkId=5bbda6023af579e812cd7415c8465eb0&quot;&gt;Scalaスケーラブルプログラミング&lt;/a&gt;の第3版が出版されて、しかも第3版から電子書籍にも対応したので、早速入手した。&lt;/p&gt;

&lt;p&gt;せっかくなんで、手元の第2版と読み比べして、差分をメモってく。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/booklog/2016/09/24/cup-book-3rd.html&quot;&gt;第11章〜第20章はこっち&lt;/a&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;section&quot;&gt;第01章 スケーラブルな言語&lt;/h1&gt;
&lt;p&gt;なし&lt;/p&gt;

&lt;h1 id=&quot;scala&quot;&gt;第02章 Scalaプログラミングの第一歩&lt;/h1&gt;
&lt;p&gt;なし&lt;/p&gt;

&lt;h1 id=&quot;scala-1&quot;&gt;第03章 Scalaプログラミングの次の一歩&lt;/h1&gt;
&lt;p&gt;なし&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;第04章 クラスとオブジェクト&lt;/h1&gt;

&lt;h2 id=&quot;section-2&quot;&gt;4.2 クラス、フィールド、メソッド&lt;/h2&gt;
&lt;p&gt;結果型の省略に関して、クラス内で宣言されたpublicメソッドの結果型を明示的に提示することが適切な方法、と紹介されている。&lt;/p&gt;

&lt;h2 id=&quot;app&quot;&gt;4.5 Appトレイト&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scala.Application&lt;/code&gt;トレイトは、コマンドライン引数を使えなかったが、&lt;code class=&quot;highlighter-rouge&quot;&gt;scala.App&lt;/code&gt;トレイトは&lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt;という名前の文字列の配列を指定しておけば、コマンドライン引数にアクセスできる。&lt;/p&gt;

&lt;p&gt;こんな感じ&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;arg: $arg&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala Sample hoge fuga
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;arg: hoge
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;arg: fuga
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-3&quot;&gt;第05章 基本型と演算子&lt;/h1&gt;

&lt;h2 id=&quot;section-4&quot;&gt;5.1 基本型&lt;/h2&gt;
&lt;p&gt;Javaのプリミティブ型に対応するScalaのvalue typeで、小文字の別名についての言及がなくなった。&lt;/p&gt;

&lt;p&gt;2.8では、↓と書いても自動的にScalaのvalue typeと同じように扱われていたらしい。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1f&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.11だとコンパイルエラーになる。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;5.2 リテラル&lt;/h2&gt;
&lt;p&gt;Javaプログラマーのための近道で、読んでおいた方がよいScalaのリテラルに、文字列補間(5.3節)が追加された。
8進数の整数リテラルをサポートしていない記載が追加された。(コードサンプルも追随している)&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;5.3 文字列補間&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;5.3節 文字列補間&lt;/strong&gt; が追加された。&lt;/p&gt;

&lt;h3 id=&quot;s&quot;&gt;s文字列補間子&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;reader&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, $name!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;raw&quot;&gt;raw補間子&lt;/h3&gt;
&lt;p&gt;s補間子と同様に扱えるが、文字列リテラルのエスケープシーケンスを認識しない。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No\\\\escape!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;No&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;\\\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;escape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ちなみにs補間子だと、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No\\\\escape!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;No&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;escape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;f&quot;&gt;f補間子&lt;/h3&gt;
&lt;p&gt;対象の式に出力書式を指定することができる。指定する場合は、対象の式に続いてパーセント記号(%)と書式指定の構文(&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.Formatter&lt;/code&gt;で定義されていりもの)を記述する。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${math.Pi}%.5f&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res0&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.14159&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;出力書式の構文が指定されていない場合、デフォルトでは%sと認識され&lt;code class=&quot;highlighter-rouge&quot;&gt;toString&lt;/code&gt;値が代入される。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;5.6 関係演算子と論理演算子&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salt&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;salt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pepper&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pepper&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;salt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pepper&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salt&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res0&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;この場合、&lt;code class=&quot;highlighter-rouge&quot;&gt;salt&lt;/code&gt;が&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;なら、&lt;code class=&quot;highlighter-rouge&quot;&gt;pepper&lt;/code&gt;が呼び出されることはない。&lt;/p&gt;

&lt;p&gt;どうしても、式の右辺(この場合&lt;code class=&quot;highlighter-rouge&quot;&gt;pepper&lt;/code&gt;)を評価したいのなら、代わりに&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;を使う。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;salt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pepper&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salt&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pepper&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res0&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-8&quot;&gt;第06章 関数型スタイルのオブジェクト&lt;/h1&gt;
&lt;p&gt;なし&lt;/p&gt;

&lt;h1 id=&quot;section-9&quot;&gt;第07章 組み込みの制御構造&lt;/h1&gt;
&lt;p&gt;なし&lt;/p&gt;

&lt;h2 id=&quot;finally&quot;&gt;7.4.3 finally節&lt;/h2&gt;
&lt;p&gt;try-catch-finallyの括弧の有無について注意書きが追加された。&lt;/p&gt;

&lt;p&gt;※ catch節では、case文を必ず括弧で囲まなければならない。しかし、try節とfinally節では、式を1つだけ含む場合は括弧で囲む必要はない。
例えば、次のようにも記述できる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-10&quot;&gt;第08章 関数とクロージャー&lt;/h1&gt;
&lt;p&gt;なし&lt;/p&gt;

&lt;h1 id=&quot;section-11&quot;&gt;第09章 制御の抽象化&lt;/h1&gt;
&lt;p&gt;なし&lt;/p&gt;

&lt;h1 id=&quot;section-12&quot;&gt;第10章 合成と継承&lt;/h1&gt;
&lt;p&gt;なし&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Sep 2016 18:00:00 +0900</pubDate>
        <link>http://modalsoul.github.io/booklog/2016/09/24/cup-book-3rd.html</link>
        <guid isPermaLink="true">http://modalsoul.github.io/booklog/2016/09/24/cup-book-3rd.html</guid>
        
        <category>Scala</category>
        
        <category>コップ本第3版</category>
        
        
        <category>booklog</category>
        
      </item>
    
      <item>
        <title>第１部 魔法のSQL 1-7 SQLで集合演算｜達人に学ぶSQL徹底指南書</title>
        <description>&lt;h1 id=&quot;sql&quot;&gt;1-7 SQLで集合演算&lt;/h1&gt;

&lt;h2 id=&quot;section&quot;&gt;導入ー集合演算に関するいくつかの注意点&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;注意１：SQLの扱う集合は重複行を許す多重集合のため、それに対応するALLオプションが存在する&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;ex.) UNION ALL&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;集合演算は重複排除のために暗黙のソートを発生させるが、&lt;strong&gt;ALLオプションを付けるとソートが行われないのでパフォーマンスが向上する&lt;/strong&gt;。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;注意２：演算の順番に優先順位がある
UNIONとEXCEPTに対して、INTERSECTのほうが先に実行される。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;併用する場合、INTERSECT以外を優先的に実行したい場合は、括弧で明示的に演算の順番を指定する必要がある。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;注意３：DBMSごとに集合演算子の実装状況にバラツキがある&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;注意４：除算の標準的な定義がない&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;テーブル同士のコンペアー&lt;/h2&gt;

&lt;h3 id=&quot;section-2&quot;&gt;1. 集合の相性チェック：基本編&lt;/h3&gt;

&lt;p&gt;ALLオプションを付けなければ重複行を排除する。テーブル同士が同じなら、重複が排除されきれいに重なり合う。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;2. 集合の相性チェック：応用編&lt;/h3&gt;

&lt;p&gt;INTERSECTにも冪等姓が成り立つ。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A INTERSECT B = A = B&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A≠Bの場合、UNIONとINTERSECTの結果は異なり、UNIONの方が絶対に行数が多くなる。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(A UNION B) EXCEPT (A INTERSECT B)&lt;/code&gt;が空集合かどうかを判定する。&lt;/p&gt;

&lt;p&gt;差分は排他的和集合を選択すればよい。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;3. 差集合で関係除算を表現する&lt;/h3&gt;
&lt;p&gt;要求される集合から引き算して、結果が空集合なら全部備えていた、と判定できる。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;4. 等しい部分集合を見つける&lt;/h3&gt;
&lt;p&gt;集合の相等性を調べる方法には、冪等性か全単射を利用する２通りがある。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;5. 重複行を削除する高速なクエリ&lt;/h3&gt;
&lt;p&gt;極値関数を使って残したいrowidを１つだけ取得し、その集合をテーブル算対から引き算する。&lt;/p&gt;

&lt;p&gt;EXCEPTを使うと、補集合を簡単に表現できる。&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Jul 2016 23:59:00 +0900</pubDate>
        <link>http://modalsoul.github.io/booklog/2016/07/27/sql-orientation-by-expert-1-7.html</link>
        <guid isPermaLink="true">http://modalsoul.github.io/booklog/2016/07/27/sql-orientation-by-expert-1-7.html</guid>
        
        <category>SQL</category>
        
        
        <category>booklog</category>
        
      </item>
    
      <item>
        <title>Knockout.jsでdebounceしたかった話</title>
        <description>&lt;p&gt;先日、&lt;a href=&quot;http://m3-engineer.connpass.com/event/33802/&quot;&gt;M3 tech meetup! #2　～フロントエンドの副作用～&lt;/a&gt;に参加してきた。&lt;/p&gt;

&lt;p&gt;その中の&lt;a href=&quot;https://speakerdeck.com/jooohn/rxjsdeshi-kong-wozhi-sitahua&quot;&gt;RxJSで時間を制した話&lt;/a&gt;で、ユーザー操作のたびに無駄にAPIがコールされるのを、RxJSの&lt;code class=&quot;highlighter-rouge&quot;&gt;debounce&lt;/code&gt;を使っていい感じにした件なんかが紹介されていた。&lt;/p&gt;

&lt;p&gt;この話、個人で作っているサービスのAPI呼び出し回数を減らすのにパクることにした。無料プランで運用しているのでAPIの上限を超えてしまわないか心配だったので。。なんかみみっちい話だけど、趣味のサービスに掛けられるコストは多くない、仕方なし。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/jooohn/rxjsdeshi-kong-wozhi-sitahua&quot;&gt;RxJSで時間を制した話&lt;/a&gt;では、Rx.JSとangular.jsを使っていたのだけれど、自分が作っているサービスはKnoskout.jsを使っているので、Knockout.jsにRx.JSのdebounceに類するものがないか調べたら、ありました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kojs.sukobuto.com/docs/rateLimit-observable&quot;&gt;変更通知を遅延させる｜Knockout.js 日本語ドキュメント&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;rateLimit拡張を使うことで、同じことができるようだ。
通常&lt;code class=&quot;highlighter-rouge&quot;&gt;observable&lt;/code&gt;は変更されるとただちに通知を行うのだけれど、rateLimit拡張を使うことで変更の通知を遅らせることができる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;ko&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rateLimit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;notifyAtFixedRate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;↑だと、&lt;code class=&quot;highlighter-rouge&quot;&gt;observable&lt;/code&gt;に &lt;strong&gt;最初に変更があった時点&lt;/strong&gt; から500ms後に変更が通知される。&lt;/p&gt;

&lt;p&gt;このrateLimit拡張は、methodのデフォルトが&lt;code class=&quot;highlighter-rouge&quot;&gt;notifyAtFixedRate&lt;/code&gt;なので、省略して↓の形式の呼び出しもできる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;ko&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rateLimit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;method&lt;/code&gt;には、もう１種類&lt;code class=&quot;highlighter-rouge&quot;&gt;notifyWhenChangesStop&lt;/code&gt;も存在して、こちらは&lt;code class=&quot;highlighter-rouge&quot;&gt;observable&lt;/code&gt;に &lt;strong&gt;指定した期間変更がなければ&lt;/strong&gt; 通知が飛ぶ。&lt;/p&gt;

&lt;p&gt;rateLimit拡張は、observable以外にもobservable arrayやconputed observableなどの、他のobservableに対応している。すばらしい。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;追記&lt;/h1&gt;
&lt;p&gt;Knockout.jsのrateLimit拡張は、バージョン3.1.0以降の呼び名で、以前はthrottle拡張という名前だったようだ。&lt;/p&gt;

&lt;p&gt;ちなみに、&lt;a href=&quot;https://lodash.com/&quot;&gt;lodash&lt;/a&gt;にも&lt;a href=&quot;https://lodash.com/docs#throttle&quot;&gt;_.throttle&lt;/a&gt;というのがあって、対象の関数の実行を指定期間に１回に制限するものらしい。これはrateLimit拡張のnotifyAtFixedRateの動作に該当する。&lt;/p&gt;

&lt;p&gt;そして、&lt;a href=&quot;https://lodash.com/docs#debounce&quot;&gt;_.debounce&lt;/a&gt;も存在して、こちらは最後に実行されてから指定時間経過後に関数を実行する。これはrateLimit拡張のnotifyWhenChangesStopの動作に該当する。&lt;/p&gt;

&lt;p&gt;で、興味深いのがRx.JSのdebounceは、動作的にはlodashの_.debounceではなくて、_.throttleのほうだということ。lodashとRs.JSの間でねじれが起きてる。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;ちなみに、debounceというのは元々ハードウェアだか電子回路の用語だそうです。
debounceという新しい単語を知ることで、連鎖的に知識が広がるいい機会でした。&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Jul 2016 18:00:00 +0900</pubDate>
        <link>http://modalsoul.github.io/programming/2016/07/24/knockout-js-debounce.html</link>
        <guid isPermaLink="true">http://modalsoul.github.io/programming/2016/07/24/knockout-js-debounce.html</guid>
        
        <category>KnockoutJS</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>第１部 魔法のSQL 1-6 相関サブクエリで行と行を比較する｜達人に学ぶSQL徹底指南書</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;1-6 相関サブクエリで行と行を比較する&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;成長・後退・現状維持&lt;/h2&gt;
&lt;p&gt;相関サブクエリと自己結合は同値変換可能な場合が多い。&lt;/p&gt;

&lt;p&gt;パフォーマンスは、環境によりけり。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;前年の比較結果を一覧表示する&lt;/h2&gt;
&lt;p&gt;相関サブクエリをSELECT句に移して、前年と今年の比較をする。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;時系列の歯抜けがある場合：直近と比較&lt;/h2&gt;
&lt;p&gt;内部結合だと、比較対象のない最初の年度が除外される。
除外しない場合、自己外部結合を使う。&lt;/p&gt;

&lt;p&gt;極地関数はソートを発生させるので、パフォーマンスが落ちる。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;移動累計と移動平均&lt;/h2&gt;
&lt;p&gt;相関サブクエリでは、スカラ・サブクエリで行数のカウントを取れる。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;オーバーラップする期間を調べる&lt;/h2&gt;

&lt;h2 id=&quot;section-6&quot;&gt;おわりに&lt;/h2&gt;
&lt;p&gt;相関サブクエリを使うと、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可読性が低くなりやすい&lt;/li&gt;
  &lt;li&gt;パフォーマンスがよくない&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 21 Jul 2016 23:00:00 +0900</pubDate>
        <link>http://modalsoul.github.io/booklog/2016/07/21/sql-orientation-by-expert-1-6.html</link>
        <guid isPermaLink="true">http://modalsoul.github.io/booklog/2016/07/21/sql-orientation-by-expert-1-6.html</guid>
        
        <category>SQL</category>
        
        
        <category>booklog</category>
        
      </item>
    
      <item>
        <title>第１部 魔法のSQL 1-5 外部結合の使い方｜達人に学ぶSQL徹底指南書</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;1-5 外部結合の使い方&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;外部結合で行列変換　その１（行→列）：クロス表を作る&lt;/h2&gt;

&lt;p&gt;外部結合はスカラ・サブクエリで代用できる。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;外部結合で行列変換　その２（列→行）：繰り返し項目を１列にまとめる&lt;/h2&gt;

&lt;p&gt;UNION ALLで、行持ちに変換。UNION ALLは重複行を削除しない。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;クロス表で入れ子の表側を作る&lt;/h2&gt;
&lt;p&gt;外部結合でも、結合条件がNULLとなり、結果がunknownになる。&lt;/p&gt;

&lt;p&gt;表側を入れ子にする場合、その形のマスタをあらかじめ用意する。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;掛け算としての結合&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;結合は、一対一でなくとも一対多ならべ行数は（不当には）増えない。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-5&quot;&gt;完全外部結合&lt;/h2&gt;
&lt;p&gt;完全外部結合は「両方をマスタに使う結合」&lt;/p&gt;

&lt;p&gt;完全外部結合を使えない環境で同じ結果を得るには、左外部結合の結果と右外部結合の結果をUNIONする。&lt;/p&gt;

&lt;p&gt;内部結合 = 積集合（INTERSECT）&lt;/p&gt;

&lt;p&gt;完全外部結合 = 和集合（UNION）&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;外部結合で集合演算&lt;/h2&gt;
&lt;p&gt;集合演算子はソートを発生させるので、パフォーマンス上の問題を引き起こす可能性がある。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;完全外部結合で排他的和集合を求める&lt;/h2&gt;
&lt;p&gt;関係除算を外部結合で書ける。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;「OUTER」は省略可能だが、内部結合に対して外部結合であることを明治するために、省略しないほうが良い。&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Jul 2016 23:00:00 +0900</pubDate>
        <link>http://modalsoul.github.io/booklog/2016/07/20/sql-orientation-by-expert-1-5.html</link>
        <guid isPermaLink="true">http://modalsoul.github.io/booklog/2016/07/20/sql-orientation-by-expert-1-5.html</guid>
        
        <category>SQL</category>
        
        
        <category>booklog</category>
        
      </item>
    
      <item>
        <title>第１部 魔法のSQL 1-4 HAVING句の力｜達人に学ぶSQL徹底指南書</title>
        <description>&lt;h1 id=&quot;having&quot;&gt;1-4 HAVING句の力&lt;/h1&gt;

&lt;h2 id=&quot;section&quot;&gt;データの歯抜けを探す&lt;/h2&gt;
&lt;p&gt;現在の標準SQLでは &lt;strong&gt;HAVING句を単独で使える&lt;/strong&gt;。
ただしその場合、SELECT句で元テーブルの列を参照できなくなるので、定数を指定するか集約関数を使う必要がある。&lt;/p&gt;

&lt;h2 id=&quot;having-1&quot;&gt;HAVING句でサブクエリ：最頻値を求める&lt;/h2&gt;
&lt;p&gt;GROUP BYは、もとの集合から部分集合を作る働きをする。&lt;/p&gt;

&lt;h2 id=&quot;having-2&quot;&gt;HAVING句で自己結合：メジアンを求める&lt;/h2&gt;
&lt;p&gt;大小関係に基づいて部分集合を作るなら、自己非等値結合。&lt;/p&gt;

&lt;h2 id=&quot;null&quot;&gt;NULLを含まない集合を探す&lt;/h2&gt;
&lt;p&gt;COUNT(*)はNULLを数える。COUNT(列名)はNULLを除外して集計する。&lt;/p&gt;

&lt;p&gt;特定の条件を満たす集合に含まれるかどうかを決める関数。 &lt;strong&gt;特性関数&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;関係除算でバスケット解析&lt;/h2&gt;
&lt;p&gt;ひとつの実体についての情報が複数行に分散して存在する場合、WHERE句で単純にORやINで条件を指定しても正しい結果は得られない。
WHERE句で指定する条件は、あくまで１行について適用されるから。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;WHERE句は &lt;strong&gt;集合の要素&lt;/strong&gt; の性質を調べる道具、対してHAVING句は &lt;strong&gt;集合自身&lt;/strong&gt; の性質を調べる道具。&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Jul 2016 23:00:00 +0900</pubDate>
        <link>http://modalsoul.github.io/booklog/2016/07/19/sql-orientation-by-expert-1-4.html</link>
        <guid isPermaLink="true">http://modalsoul.github.io/booklog/2016/07/19/sql-orientation-by-expert-1-4.html</guid>
        
        <category>SQL</category>
        
        
        <category>booklog</category>
        
      </item>
    
      <item>
        <title>第１部 魔法のSQL 1-3 3値理論とNULL｜達人に学ぶSQL徹底指南書</title>
        <description>&lt;h1 id=&quot;null&quot;&gt;1-3 3値理論とNULL&lt;/h1&gt;

&lt;h2 id=&quot;null-&quot;&gt;1. 比較述語とNULL その１：排中律が成立しない&lt;/h2&gt;
&lt;p&gt;「命題とその否定を「または」でつなげてできる命題はすべて真である」というのが排中律。&lt;/p&gt;

&lt;h2 id=&quot;null-casenull&quot;&gt;2. 比較述語とNULL その２：CASE式とNULL&lt;/h2&gt;
&lt;p&gt;単純CASE式の&lt;code class=&quot;highlighter-rouge&quot;&gt;CASE col_1 WHEN NULL&lt;/code&gt;は、&lt;code class=&quot;highlighter-rouge&quot;&gt;col_1 = NULL&lt;/code&gt;の省略形なので、trueにならず思ったような動作にならない。&lt;/p&gt;

&lt;h2 id=&quot;not-innot-exists&quot;&gt;3. NOT INとNOT EXISTSは同値ではない&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;NOT INのサブクエリで使用されるテーブルの選択列にNULLが存在する場合、&lt;/strong&gt; SQL全体の結果は常に空になる。&lt;/p&gt;

&lt;p&gt;EXITSは&lt;strong&gt;true&lt;/strong&gt; と&lt;strong&gt;false&lt;/strong&gt; しか返さない。そのため、INとEXISTSは同値変換が可能だが、NOT INとNOT EXISTSは同値ではない。&lt;/p&gt;

&lt;h2 id=&quot;null-1&quot;&gt;4. 限定述語とNULL&lt;/h2&gt;
&lt;p&gt;ALL述語は条件をANDで連結した論理式の省略形。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;5. 限定述語と極値関数は同値ではない&lt;/h2&gt;
&lt;p&gt;極値関数は &lt;strong&gt;集計の際にNULLを排除する&lt;/strong&gt;、 &lt;strong&gt;入力が空集合だった場合はNULLを返す&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;比較対象が存在しない場合、全行を返すべきか１行も返さないべきか、判断が必要。&lt;/p&gt;

&lt;h2 id=&quot;null-2&quot;&gt;6. 集約関数とNULL&lt;/h2&gt;
&lt;p&gt;COUNT関数以外の集約関数も、入力が空の場合NULLを返す。&lt;/p&gt;

&lt;p&gt;NULLを何らかの値に変換するか、帰ってきたNULLに対処するのかのどちらかを選ぶ必要がある。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;NULLみな死すべし、慈悲はない&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Jul 2016 20:00:00 +0900</pubDate>
        <link>http://modalsoul.github.io/booklog/2016/07/19/sql-orientation-by-expert-1-3.html</link>
        <guid isPermaLink="true">http://modalsoul.github.io/booklog/2016/07/19/sql-orientation-by-expert-1-3.html</guid>
        
        <category>SQL</category>
        
        
        <category>booklog</category>
        
      </item>
    
      <item>
        <title>ErgoDox EZを注文した</title>
        <description>&lt;p&gt;左手の親指の具合がどうもよろしくないので、セパレートかつエルゴノミクスなキーボードを探したら、これに行き着いた次第です。&lt;/p&gt;

&lt;p&gt;で、一式揃ったキット&lt;a href=&quot;https://www.indiegogo.com/projects/ergodox-ez-an-incredible-mechanical-keyboard/x/14602708#/&quot;&gt;ErgoDox EZ&lt;/a&gt;を&lt;a href=&quot;https://www.indiegogo.com/&quot;&gt;INDIEGOGO&lt;/a&gt;で注文した。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ErgoDox EZ Bundle:Blank $295&lt;/li&gt;
  &lt;li&gt;送料 $30&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;合計：$325&lt;/p&gt;

&lt;p&gt;早くこないかな&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jul 2016 22:00:00 +0900</pubDate>
        <link>http://modalsoul.github.io/gadget/2016/07/18/ergodox-ez-ordered.html</link>
        <guid isPermaLink="true">http://modalsoul.github.io/gadget/2016/07/18/ergodox-ez-ordered.html</guid>
        
        <category>ErgoDox</category>
        
        
        <category>gadget</category>
        
      </item>
    
      <item>
        <title>第１部 魔法のSQL 1-2 自己結合の使い方｜達人に学ぶSQL徹底指南書</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;1-2 自己結合の使い方&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;重複順列・順列・組み合わせ&lt;/h2&gt;

&lt;h3 id=&quot;section-2&quot;&gt;順列対&lt;/h3&gt;
&lt;p&gt;クロス結合して単純に直積を作れば得られる。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;順序対から重複を排除&lt;/h3&gt;
&lt;p&gt;結合条件によって、同一要素の組み合わせを排除。
２つのテーブルが実際に存在すると想像することがポイント。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;組み合わせ&lt;/h3&gt;
&lt;p&gt;等号「=」以外の比較演算子である&lt;や&gt;, &amp;lt;&amp;gt;を使って行う結合を「 **非等値結合** 」と言う。&lt;/や&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;重複行を削除する&lt;/h2&gt;
&lt;p&gt;自己相関サブクエリを使って重複を削除。
SQLの動作を考える際に、データの記憶方法（テーブル、ビュー）を考慮する必要はない。どちらも等しく「集合」（関係）。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;部分的に不一致なキーの検索&lt;/h2&gt;
&lt;p&gt;自己非等値結合を使う。
結合の代わりに、相関サブクエリを使っても書ける。この場合、DISTINCTが不要になる。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;ランキング&lt;/h2&gt;
&lt;p&gt;自己非等値結合を使う。
「同心円的な」（セルコ）再帰的集合を作る。&lt;/p&gt;

&lt;p&gt;※ 結合条件に合致しない場合も結果に反映させるために、内部結合ではなく外部結合を使っている。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;同順位が続いた後に順位を飛ばす&lt;/h3&gt;
&lt;p&gt;COUNTで件数をだし、順位に使う。&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;連続的に出力する&lt;/h3&gt;
&lt;p&gt;COUNTの対象をDISTINCTにすることで対応。&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;自己結合はとても強力だけど、異なるテーブル同士を対象に行う結合に比べてコスト高。
※ 特に非等値結合と組み合わせる場合。&lt;/p&gt;

&lt;p&gt;自己結合で使用する結合キーは、なるべく主キーを使うか、インデックスを作成しておく。&lt;/p&gt;

&lt;p&gt;本当に異なるテーブルを結合していると理解しやすい。&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Jul 2016 18:00:00 +0900</pubDate>
        <link>http://modalsoul.github.io/booklog/2016/07/17/sql-orientation-by-expert-1-2.html</link>
        <guid isPermaLink="true">http://modalsoul.github.io/booklog/2016/07/17/sql-orientation-by-expert-1-2.html</guid>
        
        <category>SQL</category>
        
        
        <category>booklog</category>
        
      </item>
    
  </channel>
</rss>
